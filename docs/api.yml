openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22007
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: object
            properties:
              from: 
                type: string
                format: date
              to: 
                type: string
                format: date
         # Example: /books?releaseDateRange.from=2023-01-01&releaseDateRange.to=2023-12-31          
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema: 
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: number of items per page 
          required: false
          schema: 
            type: integer
            default: 50 #valeur par d√©faut pour pageSize

      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses'
        403:
          $ref: '#/components/responses/SpecificResponse403'
        500:
          $ref: '#/components/responses/SpecificResponse500'            

    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: CrupdateBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrupdateBook'

    delete: 
        tags:
          - "Books"
        summary: Remove a books by Id
        operationId: deleteBooks
        parameters:
          - in: query
            name: id
            description: remove book by given Id
            required: true
            schema: 
              type: string
        responses:
          200: 
            description: Confirmation the book is delete
            content:
              application/txt:
                schema:
                  type: string
                  example: "The book with id=1 removed authors are ordered by name"
  /books/import:
    post:
      tags:
        - "Books"
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                  description: Excel file containing book data
                jsonFile:
                  type: string
                  format: binary
                  description: JSON file containing book data
      responses:
        200:
          $ref: '#/components/responses/BookList_200'               

  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - Books
      summary: Modify topic for a book by Id
      operationId: updateTopicForBook
      parameters:
        - in: path
          name: bookId
          description: Id of book
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          description: Id of topic
          required: true
          schema:
            type: string

        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50

      responses:
        200:
          description: Book updated topic
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Book'
  /books/topics:
    put:
      tags:
        - Books
      summary: Modify topics for books by Id
      operationId: updateBooksWithTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/UpdateBookTopic'
      responses:
        200:
          description: The updated book with author

          
  /authors:
    get:
      tags:
        - "Authors"
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
      summary: Get all authors
      description: Get a list of all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'            
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema: 
            type: integer
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/BadRequest_400'
        403:
          $ref: '#/components/responses/Forbidden_403'
        500:
          $ref: '#/components/responses/InternalServerError_500'            
    

    put:
      tags:
        - "Authors"
      summary: Create or update authors 
      operationId: createAndUpdateTheAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'

      responses:
        200:
          $ref: '#/components/schemas/AuthorListBody'      
    delete:
      tags:
        - "Authors"
      summary: Delete authors
      operationId: deleteTheAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string

      responses:
        200:
          $ref: '#/components/schemas/AuthorListBody'              

  /books/{bookId}/authors/{authorId}:
    put: 
      tags:
        - "Books"
      summary: Associate a single book to one author
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/BookList_200'    
  /books/authors:
    put:
      tags:
        - "Books"
      summary: Modify author for a book by ID
      requestBody: 
        content: 
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/BookList_200' 
  /authors/import:
    post:
      tags:
        - "Authors"
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
       content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                  description: Excel file containing author data
                jsonFile:
                  type: string
                  format: binary
                  description: JSON file containing author data
      responses:
        200:
          $ref: '#/components/responses/BookList_200'      
              
  /topics:
    get:
      tags:
        - "Topics"
      summary: Get all topics
      description: The returned topics are ordered by name.
      operationId: getTopics
      parameters:
        - in: query
          name: name
          description: Filter return topic by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'   
    put:
      tags:
        - "Topics"
      summary: Create or update a list of topic
      operationId: crupdateTopic
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateTopic'
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'

    delete:
      tags:
        - "Topics"
      summary: Delete topics by ID
      operationId: deleteTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: List of topics is deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'  
  /authorTopics:
    get:
      tags:
        - "Authors"
        - "Topics"
      summary: Get all topics associated with an author
      operationId: getAuthorTopics
      parameters:
        - $ref: '#/components/parameters/queryPagination' 
        - in: query
          name: authorId
          description: ID of the author
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of topics associated with the author
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/author'
                    - $ref: '#/components/schemas/Topic'                                                                   
components:
  schemas:
    CrupdateTopic:
      type: object
      properties:
        topicName:
          type: string
          example: 'Romance'

    Topic:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - $ref: '#/components/schemas/CrupdateTopic'    
    CrupdateBook:
      type: object
      properties:
        bookName:
          type: string  
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER          
        releaseDate:
          type: string
          format: date

    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId: 
          type: string
      required:
        - "bookId"
        - "authorId"

    Book:
      type: object
      allOf:
        - properties:
            id:
              type: string
            author:
              allOf:
                - $ref: '#/components/schemas/author'                
        - $ref: '#/components/schemas/CrupdateBook'
    author:
      type: object
      properties:
        id:
          type: string  
        name:
          type: string
        sex:
          type: string
          enum:
            - Male
            - Female
            - Female
    AuthorTopics:
      type: object
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CrupdateAuthor'
      properties:
        topic:
          type: array
          items:
            $ref: '#/components/schemas/Topic' 
    CrupdateAuthor:
      type: object
      properties:
        authorName:
          type: string
          example: John Doe
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
                               
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: ID of the book
        authorId:
          type: string
          description: ID of the author
          
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - Male
            - Female
            - Other
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string

    ResponcesStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: 'Succes'

    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponcesStatus'
        body:
          type: object

    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    AuthorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/author'


    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: Bad Request
        body: { }
    Forbidden:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example: 
        status:
          code: 403
          message: Forbidden
        body: { }  

    InternalServerError:
      allOf:
        -  $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 5000
          message: Internal Sever Error
        body: { }    


        
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1

    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: true
      schema:
        type: integer

  responses:
      DefaultResponse:
        description: Default responses
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: object
                  properties:
                    code:
                      type: integer
                    message:
                      type: string
                body:
                  type: object  
      BookList_200:
        description: list of book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookListBody'
      AuthorList_200:
        description: list of author
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorListBody'
      BadRequest_400:
        description: Bad Request  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadRequestBody'
      InternalServerError_500:
        description: INteranl Server  Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalServerError' 
      Forbidden_403:
        description:  Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/responses/Forbidden_403'

              





      SpecificResponse400:
        description: Bad Request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/DefaultResponse'
                - type: object
                - properties:
                    status:
                      properties:
                        code:
                          default: 400
                        message:  
                          default: "Bad Request"
                    body:
                      example: { }


      SpecificResponse403:
        description: Forbidden
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/DefaultResponse'
                - type: object
                - properties:
                    status:
                      type: object
                      properties:
                        code:
                          default: 403
                        message:
                          default: "Forbidden"
                    body:
                      example: {}
      SpecificResponse500:
        description: Internal Server Error
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/DefaultResponse'
                - type: object
                - properties:
                    status:
                      properties:
                        code:
                          default: 500
                        message:
                          default: "Internal Server Error"                                                                 
                    body:
                      example: {}