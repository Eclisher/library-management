openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22007
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: object
            properties:
              from: 
                type: string
                format: date
              to: 
                type: string
                format: date
         # Example: /books?releaseDateRange.from=2023-01-01&releaseDateRange.to=2023-12-31          
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema: 
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: number of items per page 
          required: false
          schema: 
            type: integer
            default: 50 #valeur par d√©faut pour pageSize

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: CrupdateBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrupdateBook'

    delete: 
        tags:
          - "Books"
        summary: Remove a books by Id
        operationId: deleteBooks
        parameters:
          - in: query
            name: id
            description: remove book by given Id
            required: true
            schema: 
              type: string
        responses:
          200: 
            description: Confirmation the book is delete
            content:
              application/txt:
                schema:
                  type: string
                  example: "The book with id=1 removed authors are ordered by name"

  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - Books
      summary: Modify topic for a book by Id
      operationId: updateTopicForBook
      parameters:
        - in: path
          name: bookId
          description: Id of book
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          description: Id of topic
          required: true
          schema:
            type: string

        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50

      responses:
        200:
          description: Book updated topic
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Book'
  /books/topics:
    put:
      tags:
        - Books
      summary: Modify topics for books by Id
      operationId: updateBooksWithTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/UpdateBookTopic'
      responses:
        200:
          description: The updated book with author

          
  /authors:
    get:
      tags:
        - "Authors"
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
      summary: Get all authors
      description: Get a list of all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema: 
            type: integer
            default: 50
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'         

    put:
      tags:
        - "Authors"
      summary: Create or update authors 
      operationId: createAndUpdateTheAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'

      responses:
        200:
          description: list of created or updates authors 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'        
    delete:
      tags:
        - "Authors"
      summary: Delete authors
      operationId: deleteTheAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string

      responses:
        200: 
          description: List of the Authors is deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'          

  /books/{bookId}/authors/{authorId}:
    put: 
      tags:
        - "Books"
      summary: Associate a single book to one author
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: the Update book
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/authors:
    put:
      tags:
        - "Books"
      summary: Modify author for a book by ID
      requestBody: 
        content: 
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The Update the books by Authors
          content:
            application/json:
              schema: 
                items:
                  $ref: '#/components/schemas/Book'
  /topics:
    get:
      tags:
        - "Topics"
      summary: Get all topics
      description: The returned topics are ordered by name.
      operationId: getTopics
      parameters:
        - in: query
          name: name
          description: Filter return topic by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'   
    put:
      tags:
        - "Topics"
      summary: Create or update a list of topic
      operationId: crupdateTopic
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateTopic'
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'

    delete:
      tags:
        - "Topics"
      summary: Delete topics by ID
      operationId: deleteTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: List of topics is deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'                                                   
components:
  schemas:
    CrupdateTopic:
      type: object
      properties:
        topicName:
          type: string
          example: 'Romance'

    Topic:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - $ref: '#/components/schemas/CrupdateTopic'    
    CrupdateBook:
      type: object
      properties:
        bookName:
          type: string  
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER          
        releaseDate:
          type: string
          format: date

    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId: 
          type: string
      required:
        - "bookId"
        - "authorId"

    Book:
      type: object
      allOf:
        - properties:
            id:
              type: string
            author:
              allOf:
                - $ref: '#/components/schemas/author'                
        - $ref: '#/components/schemas/CrupdateBook'
    author:
      type: object
      properties:
        id:
          type: string  
        name:
          type: string
        sex:
          type: string
          enum:
            - Male
            - Female
            - Female
    AuthorTopics:
      type: object
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CrupdateAuthor'
      properties:
        topic:
          type: array
          items:
            $ref: '#/components/schemas/Topic' 
    CrupdateAuthor:
      type: object
      properties:
        authorName:
          type: string
          example: John Doe
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
                               
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: ID of the book
        authorId:
          type: string
          description: ID of the author            
